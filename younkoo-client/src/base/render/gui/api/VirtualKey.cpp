#include "VirtualKey.h"
#include "utils/Wstr.h"

constexpr const char* keys[] =
{
	"None",
	"Mouse 1",
	"Mouse 2",
	"CN",
	"Mouse 3",
	"Mouse 4",
	"Mouse 5",
	"-",
	"Back",
	"Tab",
	"-",
	"-",
	"CLR",
	"Enter",
	"-",
	"-",
	"Shift",
	"CTL",
	"Menu",
	"Pause",
	"Caps Lock",
	"KAN",
	"-",
	"JUN",
	"FIN",
	"KAN",
	"-",
	"Escape",
	"CON",
	"NCO",
	"ACC",
	"MAD",
	"Space",
	"PGU",
	"PGD",
	"End",
	"Home",
	"Left",
	"Up",
	"Right",
	"Down",
	"SEL",
	"PRI",
	"EXE",
	"PRI",
	"INS",
	"Delete",
	"HEL",
	"0",
	"1",
	"2",
	"3",
	"4",
	"5",
	"6",
	"7",
	"8",
	"9",
	"-",
	"-",
	"-",
	"-",
	"-",
	"-",
	"-",
	"A",
	"B",
	"C",
	"D",
	"E",
	"F",
	"G",
	"H",
	"I",
	"J",
	"K",
	"L",
	"M",
	"N",
	"O",
	"P",
	"Q",
	"R",
	"S",
	"T",
	"U",
	"V",
	"W",
	"X",
	"Y",
	"Z",
	"WIN",
	"WIN",
	"APP",
	"-",
	"SLE",
	"Numpad 0",
	"Numpad 1",
	"Numpad 2",
	"Numpad 3",
	"Numpad 4",
	"Numpad 5",
	"Numpad 6",
	"Numpad 7",
	"Numpad 8",
	"Numpad 9",
	"MUL",
	"ADD",
	"SEP",
	"MIN",
	"Delete",
	"DIV",
	"F1",
	"F2",
	"F3",
	"F4",
	"F5",
	"F6",
	"F7",
	"F8",
	"F9",
	"F10",
	"F11",
	"F12",
	"F13",
	"F14",
	"F15",
	"F16",
	"F17",
	"F18",
	"F19",
	"F20",
	"F21",
	"F22",
	"F23",
	"F24",
	"-",
	"-",
	"-",
	"-",
	"-",
	"-",
	"-",
	"-",
	"NUM",
	"SCR",
	"EQU",
	"MAS",
	"TOY",
	"OYA",
	"OYA",
	"-",
	"-",
	"-",
	"-",
	"-",
	"-",
	"-",
	"-",
	"-",
	"Shift",
	"Shift",
	"Ctrl",
	"Ctrl",
	"Alt",
	"Alt"
};

std::string VirtualKey::toString(int key)
{
	return std::string(keys[key]);
}

std::wstring VirtualKey::toStringW(int key)
{
	return wstr::toString(keys[key]);
}
#include <Windows.h>
#include <base/render/gui/input/Context.hpp>
int getKeyMods()
{
	int mods = 0;

	if (GetKeyState(VK_SHIFT) & 0x8000)
		mods |= CONTEXT_MOD_SHIFT;
	if (GetKeyState(VK_CONTROL) & 0x8000)
		mods |= CONTEXT_MOD_CONTROL;
	if (GetKeyState(VK_MENU) & 0x8000)
		mods |= CONTEXT_MOD_ALT;
	if ((GetKeyState(VK_LWIN) | GetKeyState(VK_RWIN)) & 0x8000)
		mods |= CONTEXT_MOD_SUPER;
	if (GetKeyState(VK_CAPITAL) & 1)
		mods |= CONTEXT_MOD_CAPS_LOCK;
	if (GetKeyState(VK_NUMLOCK) & 1)
		mods |= CONTEXT_MOD_NUM_LOCK;

	return mods;
}
